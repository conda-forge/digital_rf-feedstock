From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <rvolz@mit.edu>
Date: Fri, 19 Aug 2022 13:40:34 -0400
Subject: [PATCH] python: Fix _get_file_list for compat with numpy 1.23 on
 Windows.

Because of changes in how np.longdouble is handled on Windows (it has
always only had double precision, but now they're being more strict
about that somehow), it errors on an operation between a Python int and
a np.longdouble. This adds an explicit conversion from int to np.uint64
first.
---
 python/digital_rf/digital_metadata.py | 4 ++--
 python/digital_rf/digital_rf_hdf5.py  | 8 ++++----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/python/digital_rf/digital_metadata.py b/python/digital_rf/digital_metadata.py
index 44ae93a..5c3c0b6 100644
--- a/python/digital_rf/digital_metadata.py
+++ b/python/digital_rf/digital_metadata.py
@@ -1018,8 +1018,8 @@ class DigitalMetadataReader(object):
 
         """
         # need to go through numpy uint64 to prevent conversion to float
-        start_ts = int(np.uint64(sample0 / self._samples_per_second))
-        end_ts = int(np.uint64(sample1 / self._samples_per_second))
+        start_ts = int(np.uint64(np.uint64(sample0) / self._samples_per_second))
+        end_ts = int(np.uint64(np.uint64(sample1) / self._samples_per_second))
 
         # convert ts to be divisible by self._file_cadence_secs
         start_ts = (start_ts // self._file_cadence_secs) * self._file_cadence_secs
diff --git a/python/digital_rf/digital_rf_hdf5.py b/python/digital_rf/digital_rf_hdf5.py
index fff5b22..f828df9 100644
--- a/python/digital_rf/digital_rf_hdf5.py
+++ b/python/digital_rf/digital_rf_hdf5.py
@@ -1642,10 +1642,10 @@ class DigitalRFReader(object):
         sample0 = int(sample0)
         sample1 = int(sample1)
         # need to go through numpy uint64 to prevent conversion to float
-        start_ts = int(np.uint64(sample0 / samples_per_second))
-        end_ts = int(np.uint64(sample1 / samples_per_second)) + 1
-        start_msts = int(np.uint64(sample0 / samples_per_second * 1000))
-        end_msts = int(np.uint64(sample1 / samples_per_second * 1000))
+        start_ts = int(np.uint64(np.uint64(sample0) / samples_per_second))
+        end_ts = int(np.uint64(np.uint64(sample1) / samples_per_second)) + 1
+        start_msts = int(np.uint64(np.uint64(sample0) / samples_per_second * 1000))
+        end_msts = int(np.uint64(np.uint64(sample1) / samples_per_second * 1000))
 
         # get subdirectory start and end ts
         start_sub_ts = int(
-- 
2.35.1

