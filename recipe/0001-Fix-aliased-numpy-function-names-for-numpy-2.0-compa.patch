From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <rvolz@mit.edu>
Date: Mon, 10 Jun 2024 14:33:57 -0400
Subject: [PATCH] Fix aliased numpy function names for numpy 2.0 compatibility

---
 python/digital_rf/digital_metadata.py | 5 +++--
 python/tests/test_digital_rf_hdf5.py  | 3 ++-
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/python/digital_rf/digital_metadata.py b/python/digital_rf/digital_metadata.py
index d736e53..0205bd2 100644
--- a/python/digital_rf/digital_metadata.py
+++ b/python/digital_rf/digital_metadata.py
@@ -14,6 +14,7 @@ Reading/writing functionality is available from two classes:
 DigitalMetadataReader and DigitalMetadataWriter.
 
 """
+
 from __future__ import absolute_import, division, print_function
 
 import collections
@@ -458,8 +459,8 @@ class DigitalMetadataWriter(object):
             f.attrs["sample_rate_numerator"] = self._sample_rate_numerator
             f.attrs["sample_rate_denominator"] = self._sample_rate_denominator
             # use np.string_ to store as fixed-length ascii strings
-            f.attrs["file_name"] = np.string_(self._file_name)
-            f.attrs["digital_metadata_version"] = np.string_(
+            f.attrs["file_name"] = np.bytes_(self._file_name)
+            f.attrs["digital_metadata_version"] = np.bytes_(
                 self._digital_metadata_version
             )
 
diff --git a/python/tests/test_digital_rf_hdf5.py b/python/tests/test_digital_rf_hdf5.py
index 367bd95..7e7e60b 100644
--- a/python/tests/test_digital_rf_hdf5.py
+++ b/python/tests/test_digital_rf_hdf5.py
@@ -7,6 +7,7 @@
 # The full license is in the LICENSE file, distributed with this software.
 # ----------------------------------------------------------------------------
 """Tests for the digital_rf.digital_rf_hdf5 module."""
+
 from __future__ import absolute_import, division, print_function
 
 import datetime
@@ -320,7 +321,7 @@ def data_block_slices(
 
 def generate_rf_data(shape, dtype, seed):
     np.random.seed(seed % 2**32)
-    nitems = np.product(shape)
+    nitems = np.prod(shape)
     byts = np.random.randint(0, 256, nitems * dtype.itemsize, "u1")
     return byts.view(dtype).reshape(shape)
 
-- 
2.45.2

