{% set version = "2.6.9" %}

package:
  name: digital_rf
  version: {{ version }}

source:
  url: https://github.com/MITHaystack/digital_rf/releases/download/{{ version }}/digital_rf-{{ version }}.tar.gz
  sha256: f2300ec838f3b60081e719123e60dbeced4580826756e7026c04a9112ddd7399
  patches:
    - 0001-Fix-aliased-numpy-function-names-for-numpy-2.0-compa.patch
    - 0002-Adapt-to-numpy-2.0-new-copy-keyword-convention.patch
    - 0003-cmake-c-Clean-up-install-so-DLL-actually-installs-on.patch

build:
  number: 2
  # there are dependency conflicts for Python 2 on Windows
  skip: true  # [win and py2k]
  run_exports:
    - {{ pin_subpackage('digital_rf') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - cmake >=3.15
    - ninja
    # cross-compilation dependencies
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]

  host:
    - hdf5
    - mako
    - numpy
    - pkgconfig
    - python
    - setuptools

  run:
    - h5py
    - hdf5
    - packaging
    - python
    - python-dateutil
    - pytz
    - six
    - watchdog

test:
  requires:
    - gnuradio-core
    - pkg-config
    - pytest >=3.6
  imports:
    - digital_rf
    - digital_rf.digital_rf_hdf5
    - gr_digital_rf
  source_files:
    - python/tests/*.py
    - python/examples/*.py
  commands:
    # verify that headers get installed
    - test -f $PREFIX/include/digital_rf/digital_rf.h  # [unix]
    - test -f $PREFIX/include/digital_rf/digital_rf_version.h  # [unix]
    - if not exist %LIBRARY_INC%\\digital_rf\\digital_rf.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\digital_rf\\digital_rf_version.h exit 1  # [win]

    # verify that pkgconfig files get installed
    - test -f $PREFIX/lib/pkgconfig/digital_rf.pc  # [unix]
    - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\digital_rf.pc exit 1  # [win]

    # verify that libs get installed and can be located through pkg-config
    - test -f $PREFIX/lib/libdigital_rf${SHLIB_EXT}  # [unix]
    - test -f `pkg-config --variable=libdir --dont-define-prefix digital_rf`/libdigital_rf${SHLIB_EXT}  # [unix]
    - if not exist %LIBRARY_BIN%\\digital_rf.dll exit 1  # [win]
    - for /f "usebackq tokens=*" %%a in (`pkg-config --variable=exec_prefix --dont-define-prefix digital_rf`) do if not exist "%%a/bin/digital_rf.dll" exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\digital_rf.lib exit 1  # [win]
    - for /f "usebackq tokens=*" %%a in (`pkg-config --variable=libdir --dont-define-prefix digital_rf`) do if not exist "%%a/digital_rf.lib" exit 1  # [win]

    # verify that CMake files get installed
    {% set cms = ["Config", "ConfigVersion", "Targets-release", "Targets"] %}
    {% for cm in cms %}
    - test -f $PREFIX/lib/cmake/libdigital_rf/libdigital_rf{{ cm }}.cmake  # [unix]
    - if not exist %LIBRARY_LIB%\\cmake\\libdigital_rf\\libdigital_rf{{ cm }}.cmake exit 1  # [win]
    {% endfor %}

    # verify that (some) GRC blocks get installed
    {% set blocks = ["digital_rf_channel_sink", "digital_rf_channel_source"] %}
    {% set blocks = blocks + ["digital_rf_sink", "digital_rf_source"] %}
    {% for block in blocks %}
    - test -f $PREFIX/share/gnuradio/grc/blocks/gr_digital_rf_{{ block }}.block.yml  # [unix]
    - if not exist %LIBRARY_PREFIX%\\share\\gnuradio\\grc\\blocks\\gr_digital_rf_{{ block }}.block.yml exit 1  # [win]
    {% endfor %}

    # verify that commands run
    - drf --help

    # run test suite and examples
    - pytest
    - python python/examples/example_write_digital_metadata.py
    - python python/examples/example_read_digital_metadata.py

about:
  home: https://github.com/MITHaystack/digital_rf
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Work with data in the Digital RF and Digital Metadata formats.
  description: |
    The Digital RF project encompasses a standardized HDF5 format for reading
    and writing of radio frequency data and the software for doing so. The
    format is designed to be self-documenting for data archive and to allow
    rapid random access for data processing. For details on the format, refer
    to the documentation.

    This suite of software includes libraries for reading and writing data in
    the Digital RF HDF5 format in C (``libdigital_rf``), Python
    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and
    MATLAB. It also contains the `thor` UHD radio recorder script, Python
    tools for managing and processing Digital RF data, example scripts that
    demonstrate basic usage, and example applications that encompass a
    complete data recording and processing chain for various use cases.

  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs
  dev_url: https://github.com/MITHaystack/digital_rf

extra:
  recipe-maintainers:
    - ryanvolz
