{% set version = "2.6.8" %}

package:
  name: digital_rf
  version: {{ version }}

source:
  url: https://github.com/MITHaystack/digital_rf/releases/download/{{ version }}/digital_rf-{{ version }}.tar.gz
  sha256: 62fd998abbdffcf406524d66a54385cede270349af695b0b0e9e24c0488ac5a0
  patches:
    - 0001-python-Replace-example-s-deprecated-use-of-np.comple.patch

build:
  number: 3
  # there are dependency conflicts for Python 2 on Windows
  skip: true  # [win and py2k]
  run_exports:
    - {{ pin_subpackage('digital_rf') }}

requirements:
  build:
    - {{ compiler('c') }}
    - cmake >=3.15
    - make  # [not win]
    # cross-compilation dependencies
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]

  host:
    - hdf5
    - mako
    - numpy
    - pkgconfig
    - python
    - setuptools

  run:
    - h5py
    - hdf5
    - {{ pin_compatible('numpy') }}
    - packaging
    - python
    - python-dateutil
    - pytz
    - six
    - watchdog

test:
  requires:
    - gnuradio-core
    - pytest >=3.6
  imports:
    - digital_rf
    - digital_rf.digital_rf_hdf5
    - gr_digital_rf
  source_files:
    - python/tests/*.py
    - python/examples/*.py
  commands:
    - pytest
    - python python/examples/example_write_digital_metadata.py
    - python python/examples/example_read_digital_metadata.py

about:
  home: https://github.com/MITHaystack/digital_rf
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Work with data in the Digital RF and Digital Metadata formats.
  description: |
    The Digital RF project encompasses a standardized HDF5 format for reading
    and writing of radio frequency data and the software for doing so. The
    format is designed to be self-documenting for data archive and to allow
    rapid random access for data processing. For details on the format, refer
    to the documentation.

    This suite of software includes libraries for reading and writing data in
    the Digital RF HDF5 format in C (``libdigital_rf``), Python
    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and
    MATLAB. It also contains the `thor` UHD radio recorder script, Python
    tools for managing and processing Digital RF data, example scripts that
    demonstrate basic usage, and example applications that encompass a
    complete data recording and processing chain for various use cases.

  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs
  dev_url: https://github.com/MITHaystack/digital_rf

extra:
  recipe-maintainers:
    - ryanvolz
